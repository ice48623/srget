#!/usr/bin/python

import socket as sk
from urlparse import urlparse
import os
import sys
import StringIO

def srget():
	path = sys.argv[3]
	if "https://" in path:
		sys.exit(2)
	if 'http://' not in path:
		path = 'http://' + path
	url = urlparse(path)
	servName = str(url[1])
	objName = str(url[2])
	port = url.port
	if port == None:
		port = 80

	input_name = sys.argv[2]

	header_name = input_name + '_temp'
	start_over = False
	start_resume = False
	def headerDownloadRequest(serv, objName):
		return ("HEAD {o} HTTP/1.1\r\n"+"Host: {s}\r\n"+"\r\n\r\n").format(o=objName, s=servName)

	def mkDownloadRequest(serv, objName, size, end_size):
		return ("GET {o} HTTP/1.1\r\n"+"Host: {s}\r\n"+"Range: bytes={h} - {i}"+"\r\n\r\n").format(o=objName, s=servName, h=str(size), i=str(end_size))

	def store_header(sock):
		header = ''
		data = ''
		while True:
			data_part = sock.recv(1024)
			data = data + data_part
			if '\r\n\r\n' in data:
				index = data.find('\r\n\r\n')
				header = data[:index+3]
				remainder = data[index+4:]
				header_file = open(header_name, 'a+')
				header_file.write(header)
				header_file.flush()
				header_file.close()
				return header,remainder

	def Find_Length(header):
		if "Content-Length" in header:
			start = header.find("Content-Length")
			end = header.find("\r\n\r\n")
			if start == -1:
				return 0
			length = header[start:end]
			start2 = length.find(":") +2
			end2 = length.find("\r\n")
			length_final = length[start2:end2]
			return int(length_final)

		return None

	def Find_oldfile_Length(input_name):
		file_name = input_name + "_temp"
		header_temp = open(file_name)
		header = ''
		for line in header_temp:
			header = header + line

		length = Find_Length(header)
		return int(length)

	def get_header(servName, port, objName):
		sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
		sock.connect((servName, port))
		header_request = headerDownloadRequest(servName, objName)
		sock.send(header_request)
		header = sock.recv(1024)
		return header
	# get_header(servName,port,objName)

	def find_ETag(header):
		if "ETag" in header:
			start = header.find("ETag")

			header = header[start:]
			# print header
			start = header.find('"')
			end = header.find("\r\n")
			ETag = header[start:end]
			return ETag
		else:
			return None;
	# find_ETag(get_header(servName, port, objName))

	def find_last_modified(header):
		s = StringIO.StringIO(header)
		for line in s:
			if "Last-Modified" in line:
				start = line.find(":") + 2
				end = line.find("\r\n")
				LModified = line[start:end]
				return LModified
		return None
	# find_last_modified(get_header(servName, port, objName))

	def open_header_file(file):
		Content = ''
		file = open(file)
		for line in file:
			Content += line
		return Content
	# open_header_file("a1.pdf_temp")

	if os.path.exists(input_name):
		check_ETag = find_ETag(get_header(servName, port, objName)) # get ETag from requested header
		exists_file_ETag = find_ETag(open_header_file(header_name)) # get ETag from header temp file

		check_length = Find_Length(get_header(servName, port, objName)) #get Content Length from requested header
		exists_file_length = os.path.getsize(input_name) # get Content Length from header temp file

		check_LModified = find_last_modified(get_header(servName, port, objName))
		exists_file_LModified = find_last_modified(open_header_file(header_name))

		if check_length != None and exists_file_length != None:
			if check_length == exists_file_length: # If Content Length from both temp file and requested header is match, print and exit
				print "The existing file is a complete file"
				sys.exit(2)
			else:
				if check_ETag != None and exists_file_ETag != None: # If ETag from both temp file and requested header is exists
					if check_ETag == exists_file_ETag: 			 # check if it match, if match resume, else start over
						start_resume = True
					else:
						start_over = True
				elif check_LModified != None and exists_file_LModified != None:
					if check_LModified == exists_file_LModified:
						start_resume = True
					else:
						start_over = True
		else:
			start_over = True

	else:
		start_over = True

	if start_over == True:
		sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
		sock.connect((servName, port))
        # request = mkDownloadRequest(servName, objName)
		size = 0
		end_size = ""
		request = mkDownloadRequest(servName, objName, size, end_size)
		sock.send(request)
		download_length = 0
		header, remainder = store_header(sock)
		length = Find_Length(header)
		body = open(input_name, 'a+')
		body_data = remainder
		body.write(remainder)
		body.flush()
		while True:

			file_size = os.path.getsize(input_name)
			# download_length += len(body_data)
			if int(file_size) == int(length):
				body.close()
				sock.close
				# download_length = str(download_length)
				os.remove(header_name)
				break

			body_data = sock.recv(1024)
			body.write(body_data)
			body.flush()
	if start_resume == True:
		size = os.path.getsize(input_name)
        # size = 117095
        end_size = Find_oldfile_Length(input_name)
        # end_size = 117129
        sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
        sock.connect((servName, port))
        request = mkDownloadRequest(servName, objName, size, end_size)
        sock.send(request)

        header, remainder = store_header(sock)
        file_size = os.path.getsize(input_name)
        length = Find_oldfile_Length(input_name)
        body = open(input_name, 'a+')
        download_length = file_size + len(remainder);
        body_data = remainder
        body.write(body_data)
        body.flush()
        while True:
        	print "download_length", download_length
        	print "length", length
        	if download_length == int(length):
        		os.remove(header_name)
        		body.close()
        		sock.close
        		break

        	body_data = sock.recv(1024)
        	body.write(body_data)
        	download_length += len(body_data)
        	body.flush()

srget()
