#!/usr/bin/python

import socket as sk
from urlparse import urlparse
import os
import sys



# #print "{!r}".format(mkDownloadRequest('intranet.mahidol','/'))
# def takeInput():
#     serv = str(sys.argv[2])
#     print serv


def srget():
    path = sys.argv[3]
    if 'https://' in path:
        sys.exit[2]
    if 'http://' not in path:
        path = 'http://' + path
    url = urlparse(path)
    servName = str(url[1])
    objName = str(url[2])
    port = url.port
    if port == None:
        port = 80
    
    input_name = sys.argv[2]

   
    # # # print 'url', url
    # print 'input_name', input_name
    # print 'servName', servName
    # print 'objName', objName
    # print 'port', port



    def mkDownloadRequest(serv, objName):
        return ("HEAD {o} HTTP/1.1\r\n"+"Host: {s}"+"\r\n\r\n").format(o=objName, s=servName)

    def resumeDownloadRequest(serv, objName, size, end_size):

        return ("GET {o} HTTP/1.1\r\n"+"Host: {s}\r\n"+"Range: bytes={h} - {i}"+"\r\n\r\n").format(o=objName, s=servName, h=str(size), i=str(end_size))

    # # servName = 'cs.muic.mahidol.ac.th'
    # # objName = '/courses/ds/hw/a1.pdf'
    # # port = 80
    # # input_name = 'a1.pdf'
    # # create an empty socket
    # sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
    # # connect to a destination as specified by the pair
    # sock.connect((servName, port))

    # request = mkDownloadRequest(servName, objName)
    # sock.send(request)
    header_name = input_name + '_temp'
    def store_header(sock):
        header = ''
        data = ''
        while True:
            data_part = sock.recv(1024)
            data = data + data_part
            # print "-------------------------------data----------------------------"
            # print data
            # print "-----------------------------end data--------------------------"
            if '\r\n\r\n' in data:
                index = data.find('\r\n\r\n')
                header = data[:index+3]
                remainder = data[index+4:]
                # header_name = input_name + '_temp'
                header_file = open(header_name, 'a+')
                header_file.write(header)
                header_file.flush()
                header_file.close()
                # print header

                return header,remainder

    def Find_Length(header):
        start = header.find("Content-Length")
        end = header.find("\r\n\r\n")
        if start == -1:
            return 0

        length = header[start:end]
        start2 = length.find(":") +2
        end2 = length.find("\r\n")
        length_final = length[start2:end2]
        return int(length_final)

    def Find_oldfile_Length(input_name):
        file_name = input_name + "_temp"
        header_temp = open(file_name)
        header = ''
        for line in header_temp:
            header = header + line
        length = Find_Length(header)
        return int(length)


    if os.path.exists(input_name):
        size = os.path.getsize(input_name)
        # size = 117095
        end_size = Find_oldfile_Length(input_name)
        # end_size = 117129
        sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
        sock.connect((servName, port))
        request = resumeDownloadRequest(servName, objName, size, end_size)
        sock.send(request)
        
    else:
        sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
        sock.connect((servName, port))
        # request = mkDownloadRequest(servName, objName)
        size = 0
        end_size = ""
        request = resumeDownloadRequest(servName, objName, size, end_size)
        sock.send(request)

    
    # print Find_Length(sock)

    


    def body(sock):
        # header, remainder = store_header(sock)
        # length = Find_Length(header)
        # body_data = remainder
        # while True:
        #     if len(body_data) == length:
        #         body = open('download.pdf', 'a+')
        #         body.write(body_data)
        #         # print os.path.getsize('download.txt')
        #         # return body_data
        #         break

        #     body_data += sock.recv(1024)





        # header, remainder = store_header(sock)
        # length = Find_Length(header)

        # body = open(input_name, 'a+')

        # body_data = remainder
        # body.write(remainder)
        # while True:
        #     if len(body_data) == length:
        #         # body = open(input_name, 'a+')
        #         # body.write(body_data)
        #         # print os.path.getsize('download.txt')
        #         # return body_data

        #         body.close

        #         break

        #     body_data += sock.recv(1024)

            
        #     body.write(body_data)

        

        if os.path.exists(input_name):
            header, remainder = store_header(sock)
            file_size = os.path.getsize(input_name)
            length = Find_oldfile_Length(input_name)
            body = open(input_name, 'a+')
            download_length = file_size + len(remainder);
            body_data = remainder
            body.write(body_data)
            body.flush()
            while True:
                print "download_length", download_length
                print "length", length
                if download_length == int(length):
                    os.remove(header_name)
                    body.close()
                    sock.close
                    break

                body_data = sock.recv(1024)
                body.write(body_data)
                download_length += len(body_data)
                body.flush()

        else:
            download_length = 0
            header, remainder = store_header(sock)
            length = Find_Length(header)
            body = open(input_name, 'a+')

            body_data = remainder
            body.write(remainder)
            body.flush()
            while True:
                
                file_size = os.path.getsize(input_name)
                download_length += len(body_data)
                if int(file_size) == int(length):
                    body.close()
                    sock.close
                    download_length = str(download_length)
                    os.remove(header_name)
                    break

                body_data = sock.recv(1024)
                body.write(body_data)
                body.flush()
    body(sock)
srget()




