#!/usr/bin/python

import asyncore, socket
import logging
from cStringIO import StringIO
import socket as sk
from urlparse import urlparse
import os
import sys

#### read user input and split it into server name, object name, port
path = sys.argv[5]
if "https://" in path: ## if user input https protocal, it will exit the program
    sys.exit(2)
if 'http://' not in path: ## if user input a path that doesn't contain http in the input, add http to the path
    path = 'http://' + path
url = urlparse(path)
servName = str(url[1])
objName = str(url[2])
port = url.port
if port == None: ## if user doesn't input specific port, use port 80
    port = 80

input_name, extension = sys.argv[2].split(".")
connection_num = int(sys.argv[4])

header_name = input_name + '_temp.txt'

start_over = False ## this will be use to determine whether it should start download over or not
start_resume = False ## this will be use to determine whether it should resume the download or not

def headerDownloadRequest(servName, objName): ## this is a helper function for HTTP request for the header only
    return ("HEAD {o} HTTP/1.1\r\n"+"Host: {s}\r\n"+"\r\n\r\n").format(o=objName, s=servName)

def mkDownloadRequest(servName, objName, size, end_size): ## a helper function for HTTP request for whole body
    return ("GET {o} HTTP/1.1\r\n"+"Host: {s}\r\n"+"Range: bytes={h} - {i}"+"\r\n\r\n").format(o=objName, s=servName, h=str(size), i=str(end_size))


def store_header(data_part): ## take data that was receive from the server and find the header, if found write to header into a header file and return header and its remainder

    if '\r\n\r\n' in data_part:
        index = data_part.find('\r\n\r\n')
        header = data_part[:index+3]
        remainder = data_part[index+4:]
        header_file = open(header_name, 'a+')
        header_file.write(header)
        header_file.flush()
        header_file.close()
        print "write header complete"
        return header,remainder
 
def Find_Length(header): ## a helper function that used to find content length from input header
    if "Content-Length" in header:
        start = header.find("Content-Length")
        end = header.find("\r\n\r\n")
        if start == -1:
            return 0
        length = header[start:end]
        start2 = length.find(":") +2
        end2 = length.find("\r\n")
        length_final = length[start2:end2]
        return int(length_final)

    return None

def Find_oldfile_Length(input_name): ## find content length from a header file
    file_name = input_name + "_temp.txt"
    header_temp = open(file_name)
    header = ''
    for line in header_temp:
        header = header + line

    length = Find_Length(header)
    return int(length)

def get_header(servName, port, objName): ## open a socket and connection to the request server and get the header, call headerDownloadRequest fucntion
    sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
    sock.connect((servName, port))
    header_request = headerDownloadRequest(servName, objName)
    sock.send(header_request)
    header = sock.recv(1024)
    return header

def find_ETag(header): ## find ETag from input header
    if "ETag" in header:
        start = header.find("ETag")

        header = header[start:]
        # print header
        start = header.find('"')
        end = header.find("\r\n")
        ETag = header[start:end]
        return ETag
    else:
        return None;

def find_last_modified(header): ## find last modified data from input header
    s = StringIO(header)
    for line in s:
        if "Last-Modified" in line:
            start = line.find(":") + 2
            end = line.find("\r\n")
            LModified = line[start:end]
            return LModified
    return None

def open_header_file(file): ## open the header file and return its content
    Content = ''
    file = open(file)
    for line in file:
        Content += line
    return Content

def make_request(req_type, what, details, size, end_size, version="1.1"): ## this function is used to generate a main HTTP request line
    """ Compose an HTTP request """
    NL = "\r\n"
    request_line = "{req_type} {what} HTTP/{ver}".format(
        req_type=req_type,
        what=what,
        ver=version
    )
 
    detail_lines = NL.join(
        "{}: {}".format(name, value) for name, value in details.iteritems()

    )

    request_range = "Range: bytes={h} - {i}".format(h=size, i=end_size)
    full_request = request_line + NL + detail_lines +NL + request_range + NL + NL
    return full_request

class HTTPClient(asyncore.dispatcher): ## main async class
    
    
    def __init__(self, host, path, port, size, end_size, temp_file_name):
        asyncore.dispatcher.__init__(self)  ## super -- call structure of super class , self is itself object
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))
        NL = "\r\n"
        print size
        print end_size
        self.host = host
        if os.path.exists(header_name):

            self.dn_progress = os.path.getsize(header_name)
        else:
            self.dn_progress = 0    
        self.keep_header = True
        self.recvbuf = StringIO()
        self.logger = logging.getLogger(host+path)

        self.sendbuf = ""
        self.temp_file_name = temp_file_name

        self.write(
            make_request('GET', path,
                {"host": host, "Connection": "close"},size, end_size) ## Non-persistent connection
            )
        
    def write(self, msg):
        self.sendbuf += msg
        # print self.sendbuf



    def handle_connect(self):
        self.logger.debug("connection established")


    def handle_close(self):
        self.logger.debug("got disconnected")
        if os.path.exists(input_name) and os.path.exists(header_name):
            if os.path.getsize(input_name) == Find_Length(open_header_file(header_name)):

                os.remove(header_name)
        self.close()

    def handle_read(self): 
        ## receive data, open/create temp file, store header if didn't, else write data into temp file.
        body_data = self.recv(1024)

        # print body_data
        write_temp = open(self.temp_file_name, 'a+')
        if self.keep_header == True:

            header, remainder = store_header(body_data)
            write_temp.write(remainder)
            write_temp.flush()
            if header != '':
                self.keep_header = False
        else:
                
            write_temp.write(body_data)
            write_temp.flush()
            self.dn_progress += len(body_data)
            print self.dn_progress

    def writeable(self):
        return len(self.sendbuf) > 0 


    def handle_write(self):
        bytes_send = self.send(self.sendbuf)
        self.sendbuf = self.sendbuf[bytes_send:]

############ Below code is in global ############

check_length = Find_Length(get_header(servName, port, objName)) #get Content Length from requested header
if os.path.exists(input_name): ## check whether the input "out put file" is exists or not
    if os.path.exists(header_name):
        print "Previous Download is not complete"
        check_ETag = find_ETag(get_header(servName, port, objName)) # get ETag from requested header
        exists_file_ETag = find_ETag(open_header_file(header_name)) # get ETag from header temp file
        print "check_ETag", check_ETag
        print "exists_file_ETag", exists_file_ETag

        
        exists_file_length = os.path.getsize(input_name) # get Content Length from header temp file

        check_LModified = find_last_modified(get_header(servName, port, objName))
        exists_file_LModified = find_last_modified(open_header_file(header_name))

        if check_length != None and exists_file_length != None:
            if check_length == exists_file_length: # If Content Length from both temp file and requested header is match, print and exit
                print "The existing file is a complete file"
                sys.exit(2)
            else:
                if check_ETag != None and exists_file_ETag != None: # If ETag from both temp file and requested header is exists
                    if check_ETag == exists_file_ETag:           # check if it match, if match resume, else start over
                        start_resume = True
                    else:
                        start_over = True
                elif check_LModified != None and exists_file_LModified != None: ## If last modified field is not empty
                    if check_LModified == exists_file_LModified: ## compare last modified from header file and from header of request server
                        start_resume = True
                    else:
                        start_over = True
        else:
            start_over = True

    else:
        print "Your file is completed"
else:
    start_over = True

if start_over == True: ## enter this if the program should start download file over
    clients = []
    for i in range(connection_num):
        temp_file_name = input_name + "_" + str(i) + ".txt"
        size = (check_length / connection_num + 1) * i
        end_size = (check_length / connection_num) + size
        print size
        print end_size
        client = HTTPClient(servName, objName, port, size, end_size, temp_file_name)
        # clients.append(HTTPClient(servName, objName, port, size, end_size, temp_file_name))
        clients += [client]
    asyncore.loop()

    final_file = open(input_name+ "." + extension, "a+")
    content =""
    for i in range(connection_num):
        temp_file_name = input_name + "_" + str(i) + ".txt"
        with open(temp_file_name, "r") as read_temp:
            data = read_temp.read()
            final_file.write(data)
            final_file.flush()
        os.remove(temp_file_name)
    os.remove(header_name)
    final_file.close()


if start_resume == True: ## enter this if the program should resume from the previous download
    
    clients = []
    for i in range(connection_num):
        temp_file_name = input_name + "_" + str(i) + ".txt"
